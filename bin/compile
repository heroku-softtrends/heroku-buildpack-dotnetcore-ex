#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps
	
### Constants

### Configure directories
BASE_DIR="$(pwd)"
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

### Load dependencies

# shellcheck source=util/common.sh
source "$BP_DIR/bin/util/common.sh"
# shellcheck source=util/apt_dpkg_install.sh
source "$BP_DIR/bin/util/apt_dpkg_install.sh" 

export_env_dir "$ENV_DIR"

### Local variable declaration
declare herokuos_version framework_version runtime_framework_version

# Get OS
herokuos_version="$(get_linux_platform_version)"

print "OS: Ubuntu $herokuos_version"
print "Stack version: ${STACK}"

print "Installing prerequisites for .NET Core on Ubuntu"
if [[ $herokuos_version == "16.04" ]]; then
	apt_install ca-certificates libc6 libgcc1 libgssapi-krb5-2 libicu55 libssl1.0.0 libstdc++6 zlib1g
elif [[ $herokuos_version == "18.04" ]]; then
	apt_install ca-certificates libc6 libgcc1 libgssapi-krb5-2 libicu60 libssl1.1 libstdc++6 zlib1g
elif [[ $herokuos_version == "19.04" ]]; then
	apt_install ca-certificates libc6 libgcc1 libgssapi-krb5-2 libicu63 libssl1.1 libstdc++6 zlib1g
elif [[ $herokuos_version == "20.04" ]]; then
   	apt_install apt-transport-https ca-certificates libc6 libgcc-s1 libgssapi-krb5-2 libicu66 libssl1.1 libstdc++6 zlib1g
elif [[ $herokuos_version == "22.04" ]]; then
   	apt_install apt-transport-https ca-certificates libc6 libgcc-s1 libgssapi-krb5-2 libicu70 liblttng-ust1 libssl3 libstdc++6 libunwind8 zlib1g
elif [[ $herokuos_version == "24.04" ]]; then
   	apt_install apt-transport-https ca-certificates libc6 libgcc-s1 libicu74 liblttng-ust1 libssl3 libstdc++6 libunwind8 zlib1g
fi

# Skip TELEMETRY_OPTOUT on production environment
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}
export ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-production}

while IFS='' read -r -d '' filename; do
	declare project_dir
	
	# Get project directory path
	project_dir=$(dirname $filename);
	print "The project directory path: ${project_dir}"
	
	# Get netcore framework version
	framework_version="$(get_framework_version $project_dir)"
	print "The netcore framework version: ${framework_version}"

	# Get dotnet runtime version
	runtime_framework_version="$(get_specific_version $BUILD_DIR)"
	if [[ -z $runtime_framework_version ]]; then	
		runtime_framework_version="$(get_runtime_framework_version $project_dir)"		
	fi
	print "The dotnet runtime version: ${runtime_framework_version} to be installed"

	# dotnet installation
	$BP_DIR/bin/util/dotnet-install.sh --architecture x64 --channel $framework_version --version $runtime_framework_version --install-dir $BUILD_DIR/.dotnet
	
	break

done < <(find $BUILD_DIR -maxdepth 2 -name "*.csproj" -print0)

# Add symbolic link for dotnet
if [[ $BUILD_DIR != '/app' ]]; then
	if [[ ! -L "$HOME/.dotnet" ]]; then
		ln -s ${BUILD_DIR}/.dotnet $HOME
	fi
fi

# Add dotnet runtime path to environment variable that is available to access dotnet command
export PATH="$PATH:$HOME/.dotnet"

## List installed dotnet runtimes
#dotnet --list-runtimes

PROFILE_PATH="$BUILD_DIR/.profile.d/dotnetcore.sh"
mkdir -p $(dirname $PROFILE_PATH)

# Export vars
echo 'export DOTNET_ROOT=$HOME/.dotnet' >> $PROFILE_PATH
echo 'export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools' >> $PROFILE_PATH
echo 'export PATH="$PATH:$HOME/.dotnet:$HOME/.apt/usr/bin"' >> $PROFILE_PATH
echo 'export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/.apt/usr/lib/x86_64-linux-gnu:$HOME/.apt/usr/lib/i386-linux-gnu:$HOME/.apt/usr/lib"' >> $PROFILE_PATH
echo 'export LIBRARY_PATH="$LIBRARY_PATH:$HOME/.apt/usr/lib/x86_64-linux-gnu:$HOME/.apt/usr/lib/i386-linux-gnu:$HOME/.apt/usr/lib"' >> $PROFILE_PATH
echo 'export INCLUDE_PATH="$INCLUDE_PATH:$HOME/.apt/usr/include"' >> $PROFILE_PATH
echo 'export CPATH="$INCLUDE_PATH"' >> $PROFILE_PATH
echo 'export CPPPATH="$INCLUDE_PATH"' >> $PROFILE_PATH
echo "export DOTNET_CLI_TELEMETRY_OPTOUT=1" >> $PROFILE_PATH
#echo "export IS_POSTGRES_USED=\"$(is_postgres_used $BUILD_DIR)\"" >> $PROFILE_PATH

# Get solution file from build directory
SOLUTION_FILE="$(get_project_sln_file $BUILD_DIR)"

#print "The nuget packages to be cleared"
dotnet nuget locals all --clear
dotnet --list-runtimes
#dotnet --info

if [[ ${#SOLUTION_FILE} -eq 0 ]]; then
	# Get project file from build directory
	PROJECT_FILE="$(get_project_file $BUILD_DIR)"

	# Get app assembly name from project file
	APP_ASSEMBLY="$(get_project_name $BUILD_DIR)"
	print "The assembly name: ${APP_ASSEMBLY}"
	echo "export APP_ASSEMBLY=\"$(get_project_name $BUILD_DIR)\"" >> $PROFILE_PATH

	RELEASE_DIR="${APP_ASSEMBLY}_Release"
	echo "export RELEASE_DIR=\"${APP_ASSEMBLY}_Release\"" >> $PROFILE_PATH
	cd $BUILD_DIR
	
	# https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish?tabs=netcore21
	# dotnet publish [<PROJECT>]
	dotnet publish $PROJECT_FILE -p:PublishDir=$BUILD_DIR/$RELEASE_DIR --configuration Release --runtime linux-x64 --no-self-contained	
else
	# Get app assembly name from project file
	APP_ASSEMBLY="$(get_start_project_name $BUILD_DIR)"
	print "The assembly name: ${APP_ASSEMBLY}"
	echo "export APP_ASSEMBLY=\"$(get_start_project_name $BUILD_DIR)\"" >> $PROFILE_PATH
	
	# Get solution name from build directory
	SOLUTION_NAME="$(get_project_sln_name $BUILD_DIR)"
	print "The solution name: ${SOLUTION_NAME}"
	
	RELEASE_DIR="${SOLUTION_NAME}_Release"
	echo "export RELEASE_DIR=\"${SOLUTION_NAME}_Release\"" >> $PROFILE_PATH
	cd $BUILD_DIR
	
	# https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish?tabs=netcore21
	# dotnet publish [<Solution>]
	dotnet publish $SOLUTION_FILE -p:PublishDir=$BUILD_DIR/$RELEASE_DIR --configuration Release --runtime linux-x64 --no-self-contained
fi

# Remove src files in production machine
find -maxdepth 1 ! -name Procfile ! -name .profile.d ! -name .apt ! -name .dotnet ! -name .heroku ! -name node_modules ! -name $RELEASE_DIR  -exec rm -rv {} \; > /dev/null 2>&1;

if [[ ! -f $BUILD_DIR/Procfile && ! -z "$APP_ASSEMBLY" ]]; then
# Create procfile and Add process type to that 
cat << EOT >> ${BUILD_DIR}/Procfile
	web: cd \$HOME/$RELEASE_DIR && dotnet "./$APP_ASSEMBLY.dll" --urls http://+:\$PORT
EOT
fi
